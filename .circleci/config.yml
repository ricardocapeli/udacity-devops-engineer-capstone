version: 2.1

jobs:

  build-backend:
    docker:
      - image: python:3.7.3-stretch
    working_directory: ./project    
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            cd ./project
            pwd
            ls
            python3 -m venv venv
            . venv/bin/activate
            make install
      - save_cache:
          paths: [backend/project]
          key: backend-build

  test-backend:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout # Checkout code from git
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test-backend
          working_directory: ./project
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
            make lint

  docker-tag-push:
    docker:
      - image: circleci/python:3.7.3-stretch
    steps:
      - checkout # Checkout code from git
      - setup_remote_docker
      - restore_cache:
          keys: [backend-build]            
      - run:
          name: Build and push Docker image
          command: |
            cd project
            ls 
            docker build -t ricardofcapeli/capstone:latest .
            echo $DOCKER_PASS | docker login -u $DOCKERHUB_USERNAME --password-stdin
            docker push ricardofcapeli/capstone:latest

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure EKS network exists
          command: |
            aws cloudformation deploy \
              --template-file infra/infrastructure/network.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://infra/infrastructure/network-parameters.json
      - run:
          name: Ensure EKS Cluster exists
          command: |
            aws cloudformation deploy \
              --template-file infra/infrastructure/cluster.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://infra/infrastructure/cluster-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m
      - run:
          name: Ensure Nodegroup exists
          command: |
            aws cloudformation deploy \
              --template-file infra/infrastructure/nodegroup.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://infra/infrastructure/nodegroup-parameters.json \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Ensure management instances exists
          command: |
            aws cloudformation deploy \
              --template-file infra/infrastructure/management.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://infra/infrastructure//management-parameters.json \
              --output text >> ~/checkIfDeployed.txt
            cat ~/checkIfDeployed.txt
      - run:
          name: Extract the IPs of the management instances for Ansible
          command: |
            echo [management] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - checkIfDeployed.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "da:a8:3e:f0:35:db:a6:ea:5d:14:9e:bc:45:4b:0b:42:bc:41:8d:59"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd infra/ansible
                ansible-playbook -i ~/inventory.txt configure-server.yml
              fi
  configure-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "da:a8:3e:f0:35:db:a6:ea:5d:14:9e:bc:45:4b:0b:42:bc:41:8d:59"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd infra/ansible
                ansible-playbook -i ~/inventory.txt configure-cluster.yml
              fi
      - run:
          name: Wait for LoadBalancer's domain to become reachable
          command: |
            if grep -q "No changes to deploy" ~/checkIfDeployed.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                echo "Wait 60 seconds..."
                sleep 60
              fi
      - run:
          name: Display the LoadBalancer's DNS name
          command: |
            cat ~/inventory.txt
            cd infra/ansible
            ansible-playbook -i ~/inventory.txt save-elb-dns.yml
            cat ~/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - elb_dns.txt

  deploy-docker:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "da:a8:3e:f0:35:db:a6:ea:5d:14:9e:bc:45:4b:0b:42:bc:41:8d:59"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Deploy newest Docker Image
          command: |
            cat ~/inventory.txt
            cd infra/ansible
            ansible-playbook -i ~/inventory.txt deploy-app.yml
          no_output_timeout: 2m            


workflows:
  default:
    jobs:
      - build-backend
      - test-backend:
          requires: [build-backend]
      - docker-tag-push:
          requires: [test-backend]
      - deploy-infrastructure:
          filters:
            branches:
              only: [ main ]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - configure-cluster:
          requires:
            - configure-infrastructure
            - upload-docker
      - deploy-docker:
          requires:
            - configure-cluster                                         
